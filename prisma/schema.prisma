// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  username     String    @unique
  passwordHash String
  avatar       String
  entries      Entry[]
  posts        Post[]
  comments     Comment[]
}

model Entry {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now()) @db.Date
  mood       String
  gratitude  String
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  activities Activity[]
  post       Post?
}

model Quote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Date
  content   String
  author    String
}

model Activity {
  id       Int     @id @default(autoincrement())
  activity String  @unique
  entries  Entry[]
}

model Post {
  id       Int       @id @default(autoincrement())
  title    String
  content  String
  checked  Boolean   @default(false)
  user     User?     @relation(fields: [userId], references: [id])
  userId   Int?
  entry    Entry     @relation(fields: [entryId], references: [id], onDelete: Cascade)
  entryId  Int       @unique
  tags     Tag[]
  comments Comment[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

//test models
model TableA {
  id      Int      @id @default(autoincrement())
  tableBs TableB[]
}

model TableB {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  tableAs TableA[]
}
